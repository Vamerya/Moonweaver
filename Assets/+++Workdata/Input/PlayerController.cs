//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/+++Workdata/Input/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""PlayerKeyboardMouseActionMap"",
            ""id"": ""3b22308c-1ae7-4663-9691-23aa1a9cabbc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""27fa00c0-9146-4a8c-837e-89e4a8796062"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f6070509-73e0-4816-89c3-aecdc9e99f65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""869709af-5c52-474b-b3f3-b6a19a014154"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""60ab1a31-5445-4553-b6c3-8fa33f5f2760"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2651d5b6-9929-446e-86ff-7929b0af232b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ade3992e-0700-41f7-9dc2-8ca7cf10451d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""14ec918e-d250-45b1-adb7-07a67e0d206b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""58461251-3bec-4ab8-8c69-636607535487"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e17238ef-d34e-4ae9-b286-93d4f8bd155c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24d94156-be21-4cf7-a630-a8565c53d0dd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerControllerActionMap"",
            ""id"": ""5831195e-10a6-4774-8c6e-72c0629a1947"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""278c7717-edb4-4a12-a7a6-231f082a15f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""97bb2498-77c9-4798-9da3-ecc00bed1fae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""48508fcc-f954-483a-993f-b6265cae38cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fbb60921-a5fa-4e68-a715-d73390a18e11"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c14bd7b0-1294-4bde-9328-40cb3bd175bc"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""545f9faa-bf17-4c6d-9b81-1c988cca5e5d"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4cd1d847-208f-4e43-908f-a358c89ebe4a"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3d009586-3a6a-4c93-864f-7a72aa1531cd"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e25f47b8-b7f5-422a-bea0-c8ed68116503"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f69355f-975b-478e-8466-875b8172f041"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerKeyboardMouseActionMap
        m_PlayerKeyboardMouseActionMap = asset.FindActionMap("PlayerKeyboardMouseActionMap", throwIfNotFound: true);
        m_PlayerKeyboardMouseActionMap_Movement = m_PlayerKeyboardMouseActionMap.FindAction("Movement", throwIfNotFound: true);
        m_PlayerKeyboardMouseActionMap_Interact = m_PlayerKeyboardMouseActionMap.FindAction("Interact", throwIfNotFound: true);
        m_PlayerKeyboardMouseActionMap_Attack = m_PlayerKeyboardMouseActionMap.FindAction("Attack", throwIfNotFound: true);
        // PlayerControllerActionMap
        m_PlayerControllerActionMap = asset.FindActionMap("PlayerControllerActionMap", throwIfNotFound: true);
        m_PlayerControllerActionMap_Movement = m_PlayerControllerActionMap.FindAction("Movement", throwIfNotFound: true);
        m_PlayerControllerActionMap_Attack = m_PlayerControllerActionMap.FindAction("Attack", throwIfNotFound: true);
        m_PlayerControllerActionMap_Interact = m_PlayerControllerActionMap.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerKeyboardMouseActionMap
    private readonly InputActionMap m_PlayerKeyboardMouseActionMap;
    private IPlayerKeyboardMouseActionMapActions m_PlayerKeyboardMouseActionMapActionsCallbackInterface;
    private readonly InputAction m_PlayerKeyboardMouseActionMap_Movement;
    private readonly InputAction m_PlayerKeyboardMouseActionMap_Interact;
    private readonly InputAction m_PlayerKeyboardMouseActionMap_Attack;
    public struct PlayerKeyboardMouseActionMapActions
    {
        private @PlayerController m_Wrapper;
        public PlayerKeyboardMouseActionMapActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerKeyboardMouseActionMap_Movement;
        public InputAction @Interact => m_Wrapper.m_PlayerKeyboardMouseActionMap_Interact;
        public InputAction @Attack => m_Wrapper.m_PlayerKeyboardMouseActionMap_Attack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerKeyboardMouseActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerKeyboardMouseActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerKeyboardMouseActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnMovement;
                @Interact.started -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnInteract;
                @Attack.started -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_PlayerKeyboardMouseActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public PlayerKeyboardMouseActionMapActions @PlayerKeyboardMouseActionMap => new PlayerKeyboardMouseActionMapActions(this);

    // PlayerControllerActionMap
    private readonly InputActionMap m_PlayerControllerActionMap;
    private IPlayerControllerActionMapActions m_PlayerControllerActionMapActionsCallbackInterface;
    private readonly InputAction m_PlayerControllerActionMap_Movement;
    private readonly InputAction m_PlayerControllerActionMap_Attack;
    private readonly InputAction m_PlayerControllerActionMap_Interact;
    public struct PlayerControllerActionMapActions
    {
        private @PlayerController m_Wrapper;
        public PlayerControllerActionMapActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerControllerActionMap_Movement;
        public InputAction @Attack => m_Wrapper.m_PlayerControllerActionMap_Attack;
        public InputAction @Interact => m_Wrapper.m_PlayerControllerActionMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControllerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllerActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControllerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnMovement;
                @Attack.started -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnAttack;
                @Interact.started -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerControllerActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerControllerActionMapActions @PlayerControllerActionMap => new PlayerControllerActionMapActions(this);
    public interface IPlayerKeyboardMouseActionMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IPlayerControllerActionMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
